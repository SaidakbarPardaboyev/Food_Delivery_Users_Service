// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: orders_service.proto

package orders_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersServiceClient is the client API for OrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersServiceClient interface {
	Create(ctx context.Context, in *CreateOrder, opts ...grpc.CallOption) (*OrderNumber, error)
	GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Order, error)
	GetAllByUserId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrdersForClient, error)
	GetAll(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*OrdersForAdmin, error)
	Delete(ctx context.Context, in *OrderNumber, opts ...grpc.CallOption) (*Void, error)
	GetTotalRevenueStatistics(ctx context.Context, in *RevenueFilter, opts ...grpc.CallOption) (*Revenue, error)
	GetPurchasingStatisticsOfUsers(ctx context.Context, in *RevenueFilter, opts ...grpc.CallOption) (*PurchasingStatisticsOfUsers, error)
}

type ordersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersServiceClient(cc grpc.ClientConnInterface) OrdersServiceClient {
	return &ordersServiceClient{cc}
}

func (c *ordersServiceClient) Create(ctx context.Context, in *CreateOrder, opts ...grpc.CallOption) (*OrderNumber, error) {
	out := new(OrderNumber)
	err := c.cc.Invoke(ctx, "/orders_service.ordersService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/orders_service.ordersService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetAllByUserId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrdersForClient, error) {
	out := new(OrdersForClient)
	err := c.cc.Invoke(ctx, "/orders_service.ordersService/GetAllByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetAll(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*OrdersForAdmin, error) {
	out := new(OrdersForAdmin)
	err := c.cc.Invoke(ctx, "/orders_service.ordersService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) Delete(ctx context.Context, in *OrderNumber, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/orders_service.ordersService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetTotalRevenueStatistics(ctx context.Context, in *RevenueFilter, opts ...grpc.CallOption) (*Revenue, error) {
	out := new(Revenue)
	err := c.cc.Invoke(ctx, "/orders_service.ordersService/GetTotalRevenueStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetPurchasingStatisticsOfUsers(ctx context.Context, in *RevenueFilter, opts ...grpc.CallOption) (*PurchasingStatisticsOfUsers, error) {
	out := new(PurchasingStatisticsOfUsers)
	err := c.cc.Invoke(ctx, "/orders_service.ordersService/GetPurchasingStatisticsOfUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServiceServer is the server API for OrdersService service.
// All implementations must embed UnimplementedOrdersServiceServer
// for forward compatibility
type OrdersServiceServer interface {
	Create(context.Context, *CreateOrder) (*OrderNumber, error)
	GetById(context.Context, *PrimaryKey) (*Order, error)
	GetAllByUserId(context.Context, *PrimaryKey) (*OrdersForClient, error)
	GetAll(context.Context, *OrderFilter) (*OrdersForAdmin, error)
	Delete(context.Context, *OrderNumber) (*Void, error)
	GetTotalRevenueStatistics(context.Context, *RevenueFilter) (*Revenue, error)
	GetPurchasingStatisticsOfUsers(context.Context, *RevenueFilter) (*PurchasingStatisticsOfUsers, error)
	mustEmbedUnimplementedOrdersServiceServer()
}

// UnimplementedOrdersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersServiceServer struct {
}

func (UnimplementedOrdersServiceServer) Create(context.Context, *CreateOrder) (*OrderNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrdersServiceServer) GetById(context.Context, *PrimaryKey) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedOrdersServiceServer) GetAllByUserId(context.Context, *PrimaryKey) (*OrdersForClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserId not implemented")
}
func (UnimplementedOrdersServiceServer) GetAll(context.Context, *OrderFilter) (*OrdersForAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedOrdersServiceServer) Delete(context.Context, *OrderNumber) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrdersServiceServer) GetTotalRevenueStatistics(context.Context, *RevenueFilter) (*Revenue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRevenueStatistics not implemented")
}
func (UnimplementedOrdersServiceServer) GetPurchasingStatisticsOfUsers(context.Context, *RevenueFilter) (*PurchasingStatisticsOfUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasingStatisticsOfUsers not implemented")
}
func (UnimplementedOrdersServiceServer) mustEmbedUnimplementedOrdersServiceServer() {}

// UnsafeOrdersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServiceServer will
// result in compilation errors.
type UnsafeOrdersServiceServer interface {
	mustEmbedUnimplementedOrdersServiceServer()
}

func RegisterOrdersServiceServer(s grpc.ServiceRegistrar, srv OrdersServiceServer) {
	s.RegisterService(&OrdersService_ServiceDesc, srv)
}

func _OrdersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ordersService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).Create(ctx, req.(*CreateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ordersService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetById(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetAllByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetAllByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ordersService/GetAllByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetAllByUserId(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ordersService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetAll(ctx, req.(*OrderFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ordersService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).Delete(ctx, req.(*OrderNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetTotalRevenueStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevenueFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetTotalRevenueStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ordersService/GetTotalRevenueStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetTotalRevenueStatistics(ctx, req.(*RevenueFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetPurchasingStatisticsOfUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevenueFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetPurchasingStatisticsOfUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ordersService/GetPurchasingStatisticsOfUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetPurchasingStatisticsOfUsers(ctx, req.(*RevenueFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersService_ServiceDesc is the grpc.ServiceDesc for OrdersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders_service.ordersService",
	HandlerType: (*OrdersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrdersService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _OrdersService_GetById_Handler,
		},
		{
			MethodName: "GetAllByUserId",
			Handler:    _OrdersService_GetAllByUserId_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _OrdersService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrdersService_Delete_Handler,
		},
		{
			MethodName: "GetTotalRevenueStatistics",
			Handler:    _OrdersService_GetTotalRevenueStatistics_Handler,
		},
		{
			MethodName: "GetPurchasingStatisticsOfUsers",
			Handler:    _OrdersService_GetPurchasingStatisticsOfUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orders_service.proto",
}
