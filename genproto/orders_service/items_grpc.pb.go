// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: items.proto

package orders_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemsServiceClient is the client API for ItemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsServiceClient interface {
	Create(ctx context.Context, in *CreateItem, opts ...grpc.CallOption) (*Item, error)
	GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Item, error)
	GetByOrderId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Items, error)
	GetAll(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Items, error)
	Update(ctx context.Context, in *UpdateItem, opts ...grpc.CallOption) (*Item, error)
	Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error)
}

type itemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsServiceClient(cc grpc.ClientConnInterface) ItemsServiceClient {
	return &itemsServiceClient{cc}
}

func (c *itemsServiceClient) Create(ctx context.Context, in *CreateItem, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/orders_service.ItemsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/orders_service.ItemsService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetByOrderId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := c.cc.Invoke(ctx, "/orders_service.ItemsService/GetByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetAll(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := c.cc.Invoke(ctx, "/orders_service.ItemsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) Update(ctx context.Context, in *UpdateItem, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/orders_service.ItemsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/orders_service.ItemsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsServiceServer is the server API for ItemsService service.
// All implementations must embed UnimplementedItemsServiceServer
// for forward compatibility
type ItemsServiceServer interface {
	Create(context.Context, *CreateItem) (*Item, error)
	GetById(context.Context, *PrimaryKey) (*Item, error)
	GetByOrderId(context.Context, *PrimaryKey) (*Items, error)
	GetAll(context.Context, *ItemFilter) (*Items, error)
	Update(context.Context, *UpdateItem) (*Item, error)
	Delete(context.Context, *PrimaryKey) (*Void, error)
	mustEmbedUnimplementedItemsServiceServer()
}

// UnimplementedItemsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServiceServer struct {
}

func (UnimplementedItemsServiceServer) Create(context.Context, *CreateItem) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedItemsServiceServer) GetById(context.Context, *PrimaryKey) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedItemsServiceServer) GetByOrderId(context.Context, *PrimaryKey) (*Items, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOrderId not implemented")
}
func (UnimplementedItemsServiceServer) GetAll(context.Context, *ItemFilter) (*Items, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedItemsServiceServer) Update(context.Context, *UpdateItem) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedItemsServiceServer) Delete(context.Context, *PrimaryKey) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedItemsServiceServer) mustEmbedUnimplementedItemsServiceServer() {}

// UnsafeItemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServiceServer will
// result in compilation errors.
type UnsafeItemsServiceServer interface {
	mustEmbedUnimplementedItemsServiceServer()
}

func RegisterItemsServiceServer(s grpc.ServiceRegistrar, srv ItemsServiceServer) {
	s.RegisterService(&ItemsService_ServiceDesc, srv)
}

func _ItemsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ItemsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).Create(ctx, req.(*CreateItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ItemsService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetById(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ItemsService/GetByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetByOrderId(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ItemsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetAll(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ItemsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).Update(ctx, req.(*UpdateItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.ItemsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).Delete(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemsService_ServiceDesc is the grpc.ServiceDesc for ItemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders_service.ItemsService",
	HandlerType: (*ItemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ItemsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ItemsService_GetById_Handler,
		},
		{
			MethodName: "GetByOrderId",
			Handler:    _ItemsService_GetByOrderId_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ItemsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ItemsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ItemsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "items.proto",
}
