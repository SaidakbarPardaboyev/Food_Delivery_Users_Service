// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: unavailable_foods_of_branches.proto

package orders_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnavailableFoodsOfBranchesServiceClient is the client API for UnavailableFoodsOfBranchesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnavailableFoodsOfBranchesServiceClient interface {
	Create(ctx context.Context, in *CreateUnavailableFood, opts ...grpc.CallOption) (*UnavailableFood, error)
	GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*UnavailableFood, error)
	GetAll(ctx context.Context, in *UnavailableFoodFilter, opts ...grpc.CallOption) (*UnavailableFoods, error)
	Update(ctx context.Context, in *UpdateUnavailableFood, opts ...grpc.CallOption) (*UnavailableFood, error)
	Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error)
	CheckUnavailabeFoodExist(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error)
}

type unavailableFoodsOfBranchesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnavailableFoodsOfBranchesServiceClient(cc grpc.ClientConnInterface) UnavailableFoodsOfBranchesServiceClient {
	return &unavailableFoodsOfBranchesServiceClient{cc}
}

func (c *unavailableFoodsOfBranchesServiceClient) Create(ctx context.Context, in *CreateUnavailableFood, opts ...grpc.CallOption) (*UnavailableFood, error) {
	out := new(UnavailableFood)
	err := c.cc.Invoke(ctx, "/orders_service.unavailable_foods_of_branches_service/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unavailableFoodsOfBranchesServiceClient) GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*UnavailableFood, error) {
	out := new(UnavailableFood)
	err := c.cc.Invoke(ctx, "/orders_service.unavailable_foods_of_branches_service/getById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unavailableFoodsOfBranchesServiceClient) GetAll(ctx context.Context, in *UnavailableFoodFilter, opts ...grpc.CallOption) (*UnavailableFoods, error) {
	out := new(UnavailableFoods)
	err := c.cc.Invoke(ctx, "/orders_service.unavailable_foods_of_branches_service/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unavailableFoodsOfBranchesServiceClient) Update(ctx context.Context, in *UpdateUnavailableFood, opts ...grpc.CallOption) (*UnavailableFood, error) {
	out := new(UnavailableFood)
	err := c.cc.Invoke(ctx, "/orders_service.unavailable_foods_of_branches_service/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unavailableFoodsOfBranchesServiceClient) Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/orders_service.unavailable_foods_of_branches_service/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unavailableFoodsOfBranchesServiceClient) CheckUnavailabeFoodExist(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/orders_service.unavailable_foods_of_branches_service/CheckUnavailabeFoodExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnavailableFoodsOfBranchesServiceServer is the server API for UnavailableFoodsOfBranchesService service.
// All implementations must embed UnimplementedUnavailableFoodsOfBranchesServiceServer
// for forward compatibility
type UnavailableFoodsOfBranchesServiceServer interface {
	Create(context.Context, *CreateUnavailableFood) (*UnavailableFood, error)
	GetById(context.Context, *PrimaryKey) (*UnavailableFood, error)
	GetAll(context.Context, *UnavailableFoodFilter) (*UnavailableFoods, error)
	Update(context.Context, *UpdateUnavailableFood) (*UnavailableFood, error)
	Delete(context.Context, *PrimaryKey) (*Void, error)
	CheckUnavailabeFoodExist(context.Context, *PrimaryKey) (*Void, error)
	mustEmbedUnimplementedUnavailableFoodsOfBranchesServiceServer()
}

// UnimplementedUnavailableFoodsOfBranchesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUnavailableFoodsOfBranchesServiceServer struct {
}

func (UnimplementedUnavailableFoodsOfBranchesServiceServer) Create(context.Context, *CreateUnavailableFood) (*UnavailableFood, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUnavailableFoodsOfBranchesServiceServer) GetById(context.Context, *PrimaryKey) (*UnavailableFood, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUnavailableFoodsOfBranchesServiceServer) GetAll(context.Context, *UnavailableFoodFilter) (*UnavailableFoods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUnavailableFoodsOfBranchesServiceServer) Update(context.Context, *UpdateUnavailableFood) (*UnavailableFood, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUnavailableFoodsOfBranchesServiceServer) Delete(context.Context, *PrimaryKey) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUnavailableFoodsOfBranchesServiceServer) CheckUnavailabeFoodExist(context.Context, *PrimaryKey) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUnavailabeFoodExist not implemented")
}
func (UnimplementedUnavailableFoodsOfBranchesServiceServer) mustEmbedUnimplementedUnavailableFoodsOfBranchesServiceServer() {
}

// UnsafeUnavailableFoodsOfBranchesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnavailableFoodsOfBranchesServiceServer will
// result in compilation errors.
type UnsafeUnavailableFoodsOfBranchesServiceServer interface {
	mustEmbedUnimplementedUnavailableFoodsOfBranchesServiceServer()
}

func RegisterUnavailableFoodsOfBranchesServiceServer(s grpc.ServiceRegistrar, srv UnavailableFoodsOfBranchesServiceServer) {
	s.RegisterService(&UnavailableFoodsOfBranchesService_ServiceDesc, srv)
}

func _UnavailableFoodsOfBranchesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnavailableFood)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnavailableFoodsOfBranchesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.unavailable_foods_of_branches_service/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnavailableFoodsOfBranchesServiceServer).Create(ctx, req.(*CreateUnavailableFood))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnavailableFoodsOfBranchesService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnavailableFoodsOfBranchesServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.unavailable_foods_of_branches_service/getById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnavailableFoodsOfBranchesServiceServer).GetById(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnavailableFoodsOfBranchesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnavailableFoodFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnavailableFoodsOfBranchesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.unavailable_foods_of_branches_service/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnavailableFoodsOfBranchesServiceServer).GetAll(ctx, req.(*UnavailableFoodFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnavailableFoodsOfBranchesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnavailableFood)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnavailableFoodsOfBranchesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.unavailable_foods_of_branches_service/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnavailableFoodsOfBranchesServiceServer).Update(ctx, req.(*UpdateUnavailableFood))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnavailableFoodsOfBranchesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnavailableFoodsOfBranchesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.unavailable_foods_of_branches_service/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnavailableFoodsOfBranchesServiceServer).Delete(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnavailableFoodsOfBranchesService_CheckUnavailabeFoodExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnavailableFoodsOfBranchesServiceServer).CheckUnavailabeFoodExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.unavailable_foods_of_branches_service/CheckUnavailabeFoodExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnavailableFoodsOfBranchesServiceServer).CheckUnavailabeFoodExist(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// UnavailableFoodsOfBranchesService_ServiceDesc is the grpc.ServiceDesc for UnavailableFoodsOfBranchesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnavailableFoodsOfBranchesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders_service.unavailable_foods_of_branches_service",
	HandlerType: (*UnavailableFoodsOfBranchesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UnavailableFoodsOfBranchesService_Create_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _UnavailableFoodsOfBranchesService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UnavailableFoodsOfBranchesService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UnavailableFoodsOfBranchesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UnavailableFoodsOfBranchesService_Delete_Handler,
		},
		{
			MethodName: "CheckUnavailabeFoodExist",
			Handler:    _UnavailableFoodsOfBranchesService_CheckUnavailabeFoodExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unavailable_foods_of_branches.proto",
}
