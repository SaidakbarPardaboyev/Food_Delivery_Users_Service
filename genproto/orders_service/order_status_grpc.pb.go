// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: order_status.proto

package orders_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderStatusServiceClient is the client API for OrderStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderStatusServiceClient interface {
	Create(ctx context.Context, in *CreateOrderStatus, opts ...grpc.CallOption) (*OrderStatus, error)
	GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrderStatus, error)
	GetLatestStatusByOrderId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrderStatus, error)
	GetByOrderId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrderStatuses, error)
	GetAll(ctx context.Context, in *OrderStatusFilter, opts ...grpc.CallOption) (*OrderStatuses, error)
	Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error)
}

type orderStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderStatusServiceClient(cc grpc.ClientConnInterface) OrderStatusServiceClient {
	return &orderStatusServiceClient{cc}
}

func (c *orderStatusServiceClient) Create(ctx context.Context, in *CreateOrderStatus, opts ...grpc.CallOption) (*OrderStatus, error) {
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, "/orders_service.OrderStatusService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusServiceClient) GetById(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrderStatus, error) {
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, "/orders_service.OrderStatusService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusServiceClient) GetLatestStatusByOrderId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrderStatus, error) {
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, "/orders_service.OrderStatusService/GetLatestStatusByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusServiceClient) GetByOrderId(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*OrderStatuses, error) {
	out := new(OrderStatuses)
	err := c.cc.Invoke(ctx, "/orders_service.OrderStatusService/GetByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusServiceClient) GetAll(ctx context.Context, in *OrderStatusFilter, opts ...grpc.CallOption) (*OrderStatuses, error) {
	out := new(OrderStatuses)
	err := c.cc.Invoke(ctx, "/orders_service.OrderStatusService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusServiceClient) Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/orders_service.OrderStatusService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderStatusServiceServer is the server API for OrderStatusService service.
// All implementations must embed UnimplementedOrderStatusServiceServer
// for forward compatibility
type OrderStatusServiceServer interface {
	Create(context.Context, *CreateOrderStatus) (*OrderStatus, error)
	GetById(context.Context, *PrimaryKey) (*OrderStatus, error)
	GetLatestStatusByOrderId(context.Context, *PrimaryKey) (*OrderStatus, error)
	GetByOrderId(context.Context, *PrimaryKey) (*OrderStatuses, error)
	GetAll(context.Context, *OrderStatusFilter) (*OrderStatuses, error)
	Delete(context.Context, *PrimaryKey) (*Void, error)
	mustEmbedUnimplementedOrderStatusServiceServer()
}

// UnimplementedOrderStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderStatusServiceServer struct {
}

func (UnimplementedOrderStatusServiceServer) Create(context.Context, *CreateOrderStatus) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderStatusServiceServer) GetById(context.Context, *PrimaryKey) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedOrderStatusServiceServer) GetLatestStatusByOrderId(context.Context, *PrimaryKey) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestStatusByOrderId not implemented")
}
func (UnimplementedOrderStatusServiceServer) GetByOrderId(context.Context, *PrimaryKey) (*OrderStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOrderId not implemented")
}
func (UnimplementedOrderStatusServiceServer) GetAll(context.Context, *OrderStatusFilter) (*OrderStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedOrderStatusServiceServer) Delete(context.Context, *PrimaryKey) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderStatusServiceServer) mustEmbedUnimplementedOrderStatusServiceServer() {}

// UnsafeOrderStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderStatusServiceServer will
// result in compilation errors.
type UnsafeOrderStatusServiceServer interface {
	mustEmbedUnimplementedOrderStatusServiceServer()
}

func RegisterOrderStatusServiceServer(s grpc.ServiceRegistrar, srv OrderStatusServiceServer) {
	s.RegisterService(&OrderStatusService_ServiceDesc, srv)
}

func _OrderStatusService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.OrderStatusService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).Create(ctx, req.(*CreateOrderStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStatusService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.OrderStatusService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).GetById(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStatusService_GetLatestStatusByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).GetLatestStatusByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.OrderStatusService/GetLatestStatusByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).GetLatestStatusByOrderId(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStatusService_GetByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).GetByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.OrderStatusService/GetByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).GetByOrderId(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStatusService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.OrderStatusService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).GetAll(ctx, req.(*OrderStatusFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStatusService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders_service.OrderStatusService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).Delete(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderStatusService_ServiceDesc is the grpc.ServiceDesc for OrderStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders_service.OrderStatusService",
	HandlerType: (*OrderStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderStatusService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _OrderStatusService_GetById_Handler,
		},
		{
			MethodName: "GetLatestStatusByOrderId",
			Handler:    _OrderStatusService_GetLatestStatusByOrderId_Handler,
		},
		{
			MethodName: "GetByOrderId",
			Handler:    _OrderStatusService_GetByOrderId_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _OrderStatusService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrderStatusService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_status.proto",
}
